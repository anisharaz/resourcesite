// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          Role            @default(STUDENT)
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  // ################## User Belonging data START ##################
  program       program[]
  department    department[]
  branch        branch[]
  semesters     semesters[]
  section       section[]
  // ################## User Belonging data END ##################
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

// ############################ AUTH START ###############################
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// ############################ AUTH END ##################################

model program {
  id           String       @id @default(cuid())
  program_name String       @unique
  departments  department[]
  User         User?        @relation(fields: [userId], references: [id])
  userId       String?
}

model department {
  id              String   @id @default(cuid())
  department_name String   @unique
  department_code String   @unique
  program         program  @relation(fields: [program_name], references: [program_name])
  program_name    String
  branches        branch[]
  User            User?    @relation(fields: [userId], references: [id])
  userId          String?
}

model branch {
  id              String     @id @default(cuid())
  branch_name     String     @unique
  branch_code     String     @unique
  department      department @relation(fields: [department_code], references: [department_code])
  department_code String
  available_sems  Json // array of semester number whose notes are available if it is [0] then there are no notes available
  subjects        subjects[]
  section         section[]
  User            User?      @relation(fields: [userId], references: [id])
  userId          String?
}

model section {
  id           String     @id @default(cuid())
  section_name String     @unique // section names - [CSE GEN A, AIML A, IOT B]
  branch       branch     @relation(fields: [branch_code], references: [branch_code])
  branch_code  String
  modules      modules[]
  User         User?      @relation(fields: [userId], references: [id])
  userId       String?
  semesters    semesters? @relation(fields: [semestersId], references: [id])
  semestersId  Int?
}

model subjects {
  id                 Int       @id @default(autoincrement())
  branch             branch    @relation(fields: [branch_code], references: [branch_code])
  branch_code        String
  semester           semesters @relation(fields: [semesters_num], references: [sem_number])
  semesters_num      Int
  subject_code       String    @unique
  subject_name       String
  subject_short_name String
  module             modules[]
}

model semesters {
  id         Int        @id @default(autoincrement())
  sem_number Int        @unique
  subjects   subjects[]
  User       User?      @relation(fields: [userId], references: [id])
  userId     String?
  section    section[]
}

model modules {
  id                 Int      @id @default(autoincrement())
  subjects           subjects @relation(fields: [subject_code], references: [subject_code])
  section            section  @relation(fields: [section_name], references: [section_name])
  section_name       String
  subject_code       String
  module_no          Int
  module_name        String
  module_description String
  module_url         Json // type of module_data is at /app/lib/types.ts
}
